package com.xsyi.core.util;import java.text.ParseException;import java.text.ParsePosition;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.GregorianCalendar;import java.util.HashMap;import java.util.Locale;import java.util.Map;import java.util.MissingResourceException;import java.util.ResourceBundle;import java.util.regex.Pattern;import org.apache.log4j.Logger;import org.springframework.context.i18n.LocaleContextHolder;import com.xsyi.core.IConstants;/** * Description: <p>TimestampConverter用于转换字符串到日期，日期转换到指定格式的字符串</p> * Content Desc:<p>TimestampConverter用于转换字符串到日期，日期转换到指定格式的字符串<p> * Copy Right of Personal Tangtao 2007-2020 * @author Tangtao Email:<a href="mailto:tangtao7481@yahoo.com.cn">tangtao7481@yahoo.com.cn</a> * @version 1.0 */public class DateUtil {    private static Logger log = Logger.getLogger(DateUtil.class);    private static String defaultDatePattern = null;    public static final String ACCT_DATE_PATTERM = "yyyyMMdd";    public static final String TAX_DATA_SCOPE = "yyyy-MM";    public static final String DATE_MASK = "yyyy-MM-dd";    public static final String DATE_TIME_MASK = "yyyy-MM-dd HH:mm:ss";    public static final String TIME_PATTERN_MASK_1 = "HH:mm:ss";    public static final String TIME_PATTERN_MASK_2 = "HH:mm";    public static final Pattern DATE_PATTERN_1 = Pattern.compile("\\d{4}-\\d{2}-\\d{2}$");    public static final Pattern DATE_PATTERN_2 = Pattern.compile("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$");    public static final Pattern TIME_PATTERN_1 = Pattern.compile("\\d{2}:\\d{2}:\\d{2}$");    public static final Pattern TIME_PATTERN_2 = Pattern.compile("\\d{2}:\\d{2}$");        public static final Map<String,String> DIGITAL_TO_CHINESES = new HashMap<String,String>();        static{    	DIGITAL_TO_CHINESES.put("0", "○");    	DIGITAL_TO_CHINESES.put("1", "一");    	DIGITAL_TO_CHINESES.put("2", "二");    	DIGITAL_TO_CHINESES.put("3", "三");    	DIGITAL_TO_CHINESES.put("4", "四");    	DIGITAL_TO_CHINESES.put("5", "五");    	DIGITAL_TO_CHINESES.put("6", "");    	DIGITAL_TO_CHINESES.put("7", "七");    	DIGITAL_TO_CHINESES.put("8", "八");    	DIGITAL_TO_CHINESES.put("9", "九");    }        //~ Methods ================================================================    /**     * Return default datePattern (MM/dd/yyyy)     * @return a string representing the date pattern on the UI     */    public static synchronized String getDatePattern() {        Locale locale = LocaleContextHolder.getLocale();        try {            defaultDatePattern = ResourceBundle.getBundle(IConstants.BUNDLE_KEY, locale).getString("date.format");        } catch (MissingResourceException mse) {            defaultDatePattern = "yyyy-dd-MM";        }        return defaultDatePattern;    }    /**     * This method attempts to convert an Oracle-formatted date     * in the form dd-MMM-yyyy to mm/dd/yyyy.     *     * @param aDate date from database as a string     * @return formatted string for the ui     */    public static final String getDate(Date aDate) {        SimpleDateFormat df = null;        String returnValue = "";        if (aDate != null) {            df = new SimpleDateFormat(getDatePattern());            returnValue = df.format(aDate);        }        return (returnValue);    }    /**     * This method generates a string representation of a date/time     * in the format you specify on input     *     * @param aMask the date pattern the string is in     * @param strDate a string representation of a date     * @return a converted Date object     * @see java.text.SimpleDateFormat     * @throws ParseException     */    public static final Date convertStringToDate(String aMask, String strDate)      throws ParseException {        SimpleDateFormat df = null;        Date date = null;        df = new SimpleDateFormat(aMask);        if (log.isDebugEnabled()) {            log.debug("converting '" + strDate + "' to date with mask '"                      + aMask + "'");        }        try {            date = df.parse(strDate);        } catch (ParseException pe) {            //log.error("ParseException: " + pe);            throw new ParseException(pe.getMessage(), pe.getErrorOffset());        }        return (date);    }    /**     * This method returns the current date time in the format:     * MM/dd/yyyy HH:MM a     *     * @param theTime the current time     * @return the current date/time     */    public static String getTimeNow(Date theTime) {        return getDateTime(DateUtil.DATE_TIME_MASK, theTime);    }    /**     * This method returns the current date in the format: MM/dd/yyyy     *      * @return the current date     * @throws ParseException     */    public static Calendar getToday() throws ParseException {        Date today = new Date();        SimpleDateFormat df = new SimpleDateFormat(getDatePattern());        // This seems like quite a hack (date -> string -> date),        // but it works ;-)        String todayAsString = df.format(today);        Calendar cal = new GregorianCalendar();        cal.setTime(convertStringToDate(todayAsString));        return cal;    }    /**     * This method generates a string representation of a date's date/time     * in the format you specify on input     *     * @param aMask the date pattern the string is in     * @param aDate a date object     * @return a formatted string representation of the date     *      * @see java.text.SimpleDateFormat     */    public static final String getDateTime(String aMask, Date aDate) {        SimpleDateFormat df = null;        String returnValue = "";        if (aDate == null) {            log.error("aDate is null!");        } else {            df = new SimpleDateFormat(aMask);            returnValue = df.format(aDate);        }        return (returnValue);    }    /**     * 解析日期字符串至日期类型内容     * @param date 日期字符串     * @param format 与日期字符串格式匹配的格式     * @return 解析后返回的日期     */    public static java.util.Date parseDate(String date, String format) {        try {            SimpleDateFormat formatter;            if (null == format)                throw new IllegalArgumentException("错误的日期格式");            formatter = new SimpleDateFormat(format);            ParsePosition pos = new ParsePosition(0);            return formatter.parse(date, pos);        } catch (Exception e) {            throw new IllegalArgumentException("错误的日期:" + date + " " + e);        }    }        /**     * This method generates a string representation of a date based     * on the System Property 'dateFormat'     * in the format you specify on input     *      * @param aDate A date to convert     * @return a string representation of the date     */    public static final String convertDateToString(Date aDate) {        return getDateTime(getDatePattern(), aDate);    }        /**     *      * @param date     * @param pattern     * @return     */    public static final String convertDataToString(Date date,String pattern){    	return getDateTime(pattern, date);    }    /**     * This method converts a String to a date using the datePattern     *      * @param strDate the date to convert (in format MM/dd/yyyy)     * @return a date object     *      * @throws ParseException     */    public static Date convertStringToDate(String strDate)      throws ParseException {        Date aDate = null;        try {            if (log.isDebugEnabled()) {                log.debug("converting date with pattern: " + getDatePattern());            }            aDate = convertStringToDate(getDatePattern(), strDate);        } catch (ParseException pe) {            log.error("Could not convert '" + strDate                      + "' to a date, throwing exception");            pe.printStackTrace();            throw new ParseException(pe.getMessage(),pe.getErrorOffset());                            }        return aDate;    }        /**     * 解析日期字符串至日期类型内容,返回java.sql.Date日期类型数据内容     * @param date 日期字符串     * @param format 与日期字符串格式匹配的格式     * @return 解析后返回的日期     */    public static java.sql.Date parseSqlDate(String date, String format) {        try {            SimpleDateFormat formatter;            if (null == format)                throw new IllegalArgumentException("错误的日期格式");            formatter = new SimpleDateFormat(format);            ParsePosition pos = new ParsePosition(0);            java.util.Date utilDate = formatter.parse(date, pos);            return new java.sql.Date( utilDate.getTime() );        } catch (Exception e) {            throw new IllegalArgumentException("错误的日期:" + date + " " + e);        }    }            /**     * 获取日期格式     * @param date 日期字符串     * @return 日期格式     * @throws Exception 非法参数或不支持格式错误信息     */    public static String getDatePattern(String date) throws Exception{    	if( date==null || "".equals(date) ){    		throw new java.lang.IllegalArgumentException("非法日期参数，无法解析日期");    	}    	if( DateUtil.DATE_PATTERN_1.matcher(date).find() ){			return "yyyy-MM-dd";		}else if( DATE_PATTERN_2.matcher(date).find() ){			return "yyyy-MM-dd HH:mm:ss";		}else if( TIME_PATTERN_1.matcher(date).find()){			return "HH:mm:ss";		}else if( TIME_PATTERN_2.matcher(date).find()){			return "HH:mm";		}else{			throw new Exception("未知日期格式，无法解析日期"); 		}    }        /*     * 获取系统时间     */    public static String getSystemDateTime(){    	return DateUtil.convertDataToString(new Date(), "yyyy-MM-dd HH:mm:ss");    }        /*     * 获取系统时间     */    public static String getSystemPreDate(){        return DateUtil.convertDataToString(org.apache.commons.lang.time.DateUtils.addDays(new Date(),-1), "yyyyMMdd");    }        /*     * 获取系统时间     */    public static String getSystemDate(){        return DateUtil.convertDataToString(new Date(), "yyyyMMdd");    }        /*     * 获取系统时间     */    public static String getSystemNextDate(){        return DateUtil.convertDataToString(org.apache.commons.lang.time.DateUtils.addDays(new Date(),1), "yyyyMMdd");    }        /*     * 获取下一天的时间     */    public static String getNextDate(Date date){        return DateUtil.convertDataToString(org.apache.commons.lang.time.DateUtils.addDays(date,1), "yyyyMMdd");    }            /**     * 获取系统年份     * @return     */    public static String getSystemYear(){    	return DateUtil.convertDataToString(new Date(),"yyyy");    }        /**     * 获取系统年份和月份     * @return     */    public static String getSystemYearMonth(){    	return DateUtil.convertDataToString(new Date(),"yyyyMM");    }        /**     * 获取系统公文日期格式     * @return     */    public static String getChinaOldSysDateFormat(){    	return DateUtil.getChinaOldSysDateFormat(null);    }        /**     * 获取税收所示时期的开始     * @return     */    public static String getTaxScopeStartDate(){    	return DateUtil.getDateTime(DateUtil.TAX_DATA_SCOPE, new Date()) + "-01";    }        /**     * 获取税收所示时期的结束     * @return     */    public static String getTaxScopeEndDate(){    	Calendar calendar = Calendar.getInstance();    	int lastDay = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);    	String endDate = DateUtil.getDateTime(DateUtil.TAX_DATA_SCOPE, new Date());    	return endDate + "-" + lastDay;    }            /**     * 获取系统公文日期格式     * @return     */    public static String getChinaOldSysDateFormat(Date date){    	Calendar calendar = Calendar.getInstance();    	if( date!=null ) calendar.setTime(date);    	char[] year = String.valueOf(calendar.get(Calendar.YEAR)).toCharArray();    	StringBuffer sysDateString = new StringBuffer("");    	for(int i=0;i<year.length;i++){    		sysDateString.append(DateUtil.DIGITAL_TO_CHINESES.get(year[i]));    	}    	sysDateString.append("年");    	int month = calendar.get(Calendar.MONTH) + 1;    	if( month<10 ){    		sysDateString.append(DateUtil.DIGITAL_TO_CHINESES.get(String.valueOf(month).toCharArray()[0]));    	}else{    		sysDateString.append("十 ");    		sysDateString.append(DateUtil.DIGITAL_TO_CHINESES.get(String.valueOf(month).toCharArray()[1]));    	}    	sysDateString.append("月");    	char[] day = String.valueOf(calendar.get(Calendar.DAY_OF_MONTH)).toCharArray();    	if( day.length==2 ){    		sysDateString.append(DateUtil.DIGITAL_TO_CHINESES.get(day[0]));    		sysDateString.append("十");    		sysDateString.append(DateUtil.DIGITAL_TO_CHINESES.get(day[1]));    	}else{    		sysDateString.append(DateUtil.DIGITAL_TO_CHINESES.get(day[0]));    	}    	sysDateString.append("日");    	return sysDateString.toString();    }        /**     * 获取两个时间的间隔天数     * @param startDate     * @param endDate     * @return     */    public static double getIntervalDateCount(Date startDate,Date endDate){    	long mis = endDate.getTime() - startDate.getTime();    	return (double)mis/86400000d;    }        /**     * 获取当前时间的i个月的第一天     *      * @param i  i==0,当前月；i==n,后n个月 ;i==-n,前n个月     * @return     */    public static String getTheFirstDayOfLastMonth(int i){                SimpleDateFormat df = new SimpleDateFormat(ACCT_DATE_PATTERM);        GregorianCalendar gcLast = (GregorianCalendar) Calendar.getInstance();        Calendar calendar = Calendar.getInstance();        calendar.setTime(new Date());        calendar.add(Calendar.MONTH, i);        Date theDate = calendar.getTime();        gcLast.setTime(theDate);        gcLast.set(Calendar.DAY_OF_MONTH, 1);        String theFirstDay = df.format(gcLast.getTime());        return theFirstDay;    }    /**     * 获取当前时间的i个月的最后一天     *      * @param i  i==1,当前月；i==1+n,后n个月 ;i==1-n,前n个月     * @return     */    public static String getTheFinalDayOfLastMonth(int i){                SimpleDateFormat df = new SimpleDateFormat(ACCT_DATE_PATTERM);        Calendar calendar = Calendar.getInstance();        calendar.setTime(new Date());        calendar.add(Calendar.MONTH, i);        calendar.set(Calendar.DATE, 1);        calendar.add(Calendar.DATE, -1);        String theFinalDay = df.format(calendar.getTime());        return theFinalDay;    }}